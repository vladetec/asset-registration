version: '3.8'

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile.dev
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/app
      - /app/__pycache__  # Evita problemas de cache
    env_file:
      - .env.dev
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
      - minio
    networks:
      - backend

  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env.dev
    ports:
      - "5432:5432"
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:RELEASE.2023-10-25T06-33-25Z
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    env_file:
      - .env.dev
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - backend

  nginx:
    build: ./nginx
    ports:
      - "8080:80"    # Acesso via http://localhost:8080
      - "8443:443"   # Para HTTPS se necess√°rio
    depends_on:
      - web
    volumes:
      - ./app/static:/app/static
      - ./app/media:/app/media
    networks:
      - backend

  celery:
    build:
      context: .
      dockerfile: Dockerfile.dev
    command: celery -A config worker --loglevel=info
    volumes:
      - .:/app
    env_file:
      - .env.dev
    depends_on:
      - redis
      - db
    networks:
      - backend

  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.dev
    environment:
      - BUILD_TIMEOUT=600
    command: celery -A config beat --loglevel=info
    volumes:
      - .:/app
    env_file:
      - .env.dev
    depends_on:
      - redis
      - db
    networks:
      - backend

volumes:
  postgres_data:
  redis_data:
  minio_data:

networks:
  backend:
    driver: bridge